
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Pedido
 * 
 */
export type Pedido = $Result.DefaultSelection<Prisma.$PedidoPayload>
/**
 * Model StatusPedido
 * 
 */
export type StatusPedido = $Result.DefaultSelection<Prisma.$StatusPedidoPayload>
/**
 * Model ProdutosDoPedido
 * 
 */
export type ProdutosDoPedido = $Result.DefaultSelection<Prisma.$ProdutosDoPedidoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pedidos
 * const pedidos = await prisma.pedido.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pedidos
   * const pedidos = await prisma.pedido.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.pedido`: Exposes CRUD operations for the **Pedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedido.findMany()
    * ```
    */
  get pedido(): Prisma.PedidoDelegate<ExtArgs>;

  /**
   * `prisma.statusPedido`: Exposes CRUD operations for the **StatusPedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusPedidos
    * const statusPedidos = await prisma.statusPedido.findMany()
    * ```
    */
  get statusPedido(): Prisma.StatusPedidoDelegate<ExtArgs>;

  /**
   * `prisma.produtosDoPedido`: Exposes CRUD operations for the **ProdutosDoPedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutosDoPedidos
    * const produtosDoPedidos = await prisma.produtosDoPedido.findMany()
    * ```
    */
  get produtosDoPedido(): Prisma.ProdutosDoPedidoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Pedido: 'Pedido',
    StatusPedido: 'StatusPedido',
    ProdutosDoPedido: 'ProdutosDoPedido'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'pedido' | 'statusPedido' | 'produtosDoPedido'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Pedido: {
        payload: Prisma.$PedidoPayload<ExtArgs>
        fields: Prisma.PedidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PedidoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PedidoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          findFirst: {
            args: Prisma.PedidoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PedidoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          findMany: {
            args: Prisma.PedidoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>[]
          }
          create: {
            args: Prisma.PedidoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          createMany: {
            args: Prisma.PedidoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PedidoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          update: {
            args: Prisma.PedidoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          deleteMany: {
            args: Prisma.PedidoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PedidoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PedidoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PedidoPayload>
          }
          aggregate: {
            args: Prisma.PedidoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePedido>
          }
          groupBy: {
            args: Prisma.PedidoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PedidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PedidoCountArgs<ExtArgs>,
            result: $Utils.Optional<PedidoCountAggregateOutputType> | number
          }
        }
      }
      StatusPedido: {
        payload: Prisma.$StatusPedidoPayload<ExtArgs>
        fields: Prisma.StatusPedidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusPedidoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusPedidoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>
          }
          findFirst: {
            args: Prisma.StatusPedidoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusPedidoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>
          }
          findMany: {
            args: Prisma.StatusPedidoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>[]
          }
          create: {
            args: Prisma.StatusPedidoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>
          }
          createMany: {
            args: Prisma.StatusPedidoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusPedidoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>
          }
          update: {
            args: Prisma.StatusPedidoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>
          }
          deleteMany: {
            args: Prisma.StatusPedidoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusPedidoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusPedidoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPedidoPayload>
          }
          aggregate: {
            args: Prisma.StatusPedidoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatusPedido>
          }
          groupBy: {
            args: Prisma.StatusPedidoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusPedidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusPedidoCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusPedidoCountAggregateOutputType> | number
          }
        }
      }
      ProdutosDoPedido: {
        payload: Prisma.$ProdutosDoPedidoPayload<ExtArgs>
        fields: Prisma.ProdutosDoPedidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutosDoPedidoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutosDoPedidoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>
          }
          findFirst: {
            args: Prisma.ProdutosDoPedidoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutosDoPedidoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>
          }
          findMany: {
            args: Prisma.ProdutosDoPedidoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>[]
          }
          create: {
            args: Prisma.ProdutosDoPedidoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>
          }
          createMany: {
            args: Prisma.ProdutosDoPedidoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProdutosDoPedidoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>
          }
          update: {
            args: Prisma.ProdutosDoPedidoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutosDoPedidoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutosDoPedidoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProdutosDoPedidoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProdutosDoPedidoPayload>
          }
          aggregate: {
            args: Prisma.ProdutosDoPedidoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProdutosDoPedido>
          }
          groupBy: {
            args: Prisma.ProdutosDoPedidoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProdutosDoPedidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutosDoPedidoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProdutosDoPedidoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PedidoCountOutputType
   */

  export type PedidoCountOutputType = {
    ProdutosDoPedido: number
  }

  export type PedidoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProdutosDoPedido?: boolean | PedidoCountOutputTypeCountProdutosDoPedidoArgs
  }

  // Custom InputTypes

  /**
   * PedidoCountOutputType without action
   */
  export type PedidoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PedidoCountOutputType
     */
    select?: PedidoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PedidoCountOutputType without action
   */
  export type PedidoCountOutputTypeCountProdutosDoPedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosDoPedidoWhereInput
  }



  /**
   * Count Type StatusPedidoCountOutputType
   */

  export type StatusPedidoCountOutputType = {
    pedido: number
  }

  export type StatusPedidoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pedido?: boolean | StatusPedidoCountOutputTypeCountPedidoArgs
  }

  // Custom InputTypes

  /**
   * StatusPedidoCountOutputType without action
   */
  export type StatusPedidoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedidoCountOutputType
     */
    select?: StatusPedidoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StatusPedidoCountOutputType without action
   */
  export type StatusPedidoCountOutputTypeCountPedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Pedido
   */

  export type AggregatePedido = {
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  export type PedidoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    statusPedidoId: number | null
  }

  export type PedidoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    statusPedidoId: number | null
  }

  export type PedidoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    pagamentoId: string | null
    statusPedidoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PedidoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    pagamentoId: string | null
    statusPedidoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PedidoCountAggregateOutputType = {
    id: number
    clienteId: number
    pagamentoId: number
    statusPedidoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PedidoAvgAggregateInputType = {
    id?: true
    clienteId?: true
    statusPedidoId?: true
  }

  export type PedidoSumAggregateInputType = {
    id?: true
    clienteId?: true
    statusPedidoId?: true
  }

  export type PedidoMinAggregateInputType = {
    id?: true
    clienteId?: true
    pagamentoId?: true
    statusPedidoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PedidoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    pagamentoId?: true
    statusPedidoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PedidoCountAggregateInputType = {
    id?: true
    clienteId?: true
    pagamentoId?: true
    statusPedidoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PedidoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedido to aggregate.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidoMaxAggregateInputType
  }

  export type GetPedidoAggregateType<T extends PedidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedido[P]>
      : GetScalarType<T[P], AggregatePedido[P]>
  }




  export type PedidoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithAggregationInput | PedidoOrderByWithAggregationInput[]
    by: PedidoScalarFieldEnum[] | PedidoScalarFieldEnum
    having?: PedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidoCountAggregateInputType | true
    _avg?: PedidoAvgAggregateInputType
    _sum?: PedidoSumAggregateInputType
    _min?: PedidoMinAggregateInputType
    _max?: PedidoMaxAggregateInputType
  }

  export type PedidoGroupByOutputType = {
    id: number
    clienteId: number
    pagamentoId: string | null
    statusPedidoId: number
    createdAt: Date
    updatedAt: Date
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  type GetPedidoGroupByPayload<T extends PedidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidoGroupByOutputType[P]>
            : GetScalarType<T[P], PedidoGroupByOutputType[P]>
        }
      >
    >


  export type PedidoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    pagamentoId?: boolean
    statusPedidoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    statusPedido?: boolean | StatusPedidoDefaultArgs<ExtArgs>
    ProdutosDoPedido?: boolean | Pedido$ProdutosDoPedidoArgs<ExtArgs>
    _count?: boolean | PedidoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pedido"]>

  export type PedidoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    pagamentoId?: boolean
    statusPedidoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PedidoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statusPedido?: boolean | StatusPedidoDefaultArgs<ExtArgs>
    ProdutosDoPedido?: boolean | Pedido$ProdutosDoPedidoArgs<ExtArgs>
    _count?: boolean | PedidoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PedidoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pedido"
    objects: {
      statusPedido: Prisma.$StatusPedidoPayload<ExtArgs>
      ProdutosDoPedido: Prisma.$ProdutosDoPedidoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      pagamentoId: string | null
      statusPedidoId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pedido"]>
    composites: {}
  }


  type PedidoGetPayload<S extends boolean | null | undefined | PedidoDefaultArgs> = $Result.GetResult<Prisma.$PedidoPayload, S>

  type PedidoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PedidoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PedidoCountAggregateInputType | true
    }

  export interface PedidoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pedido'], meta: { name: 'Pedido' } }
    /**
     * Find zero or one Pedido that matches the filter.
     * @param {PedidoFindUniqueArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PedidoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoFindUniqueArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PedidoFindUniqueOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PedidoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PedidoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindFirstArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pedido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PedidoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedido.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pedidoWithIdOnly = await prisma.pedido.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PedidoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pedido.
     * @param {PedidoCreateArgs} args - Arguments to create a Pedido.
     * @example
     * // Create one Pedido
     * const Pedido = await prisma.pedido.create({
     *   data: {
     *     // ... data to create a Pedido
     *   }
     * })
     * 
    **/
    create<T extends PedidoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoCreateArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pedidos.
     *     @param {PedidoCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedido = await prisma.pedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PedidoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pedido.
     * @param {PedidoDeleteArgs} args - Arguments to delete one Pedido.
     * @example
     * // Delete one Pedido
     * const Pedido = await prisma.pedido.delete({
     *   where: {
     *     // ... filter to delete one Pedido
     *   }
     * })
     * 
    **/
    delete<T extends PedidoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoDeleteArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pedido.
     * @param {PedidoUpdateArgs} args - Arguments to update one Pedido.
     * @example
     * // Update one Pedido
     * const pedido = await prisma.pedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PedidoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoUpdateArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidoDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PedidoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PedidoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedido = await prisma.pedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PedidoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedido.
     * @param {PedidoUpsertArgs} args - Arguments to update or create a Pedido.
     * @example
     * // Update or create a Pedido
     * const pedido = await prisma.pedido.upsert({
     *   create: {
     *     // ... data to create a Pedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedido we want to update
     *   }
     * })
    **/
    upsert<T extends PedidoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PedidoUpsertArgs<ExtArgs>>
    ): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedido.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidoCountArgs>(
      args?: Subset<T, PedidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidoAggregateArgs>(args: Subset<T, PedidoAggregateArgs>): Prisma.PrismaPromise<GetPedidoAggregateType<T>>

    /**
     * Group by Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidoGroupByArgs['orderBy'] }
        : { orderBy?: PedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pedido model
   */
  readonly fields: PedidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PedidoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    statusPedido<T extends StatusPedidoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusPedidoDefaultArgs<ExtArgs>>): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ProdutosDoPedido<T extends Pedido$ProdutosDoPedidoArgs<ExtArgs> = {}>(args?: Subset<T, Pedido$ProdutosDoPedidoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pedido model
   */ 
  interface PedidoFieldRefs {
    readonly id: FieldRef<"Pedido", 'Int'>
    readonly clienteId: FieldRef<"Pedido", 'Int'>
    readonly pagamentoId: FieldRef<"Pedido", 'String'>
    readonly statusPedidoId: FieldRef<"Pedido", 'Int'>
    readonly createdAt: FieldRef<"Pedido", 'DateTime'>
    readonly updatedAt: FieldRef<"Pedido", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Pedido findUnique
   */
  export type PedidoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido findUniqueOrThrow
   */
  export type PedidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido findFirst
   */
  export type PedidoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Pedido findFirstOrThrow
   */
  export type PedidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Pedido findMany
   */
  export type PedidoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * Pedido create
   */
  export type PedidoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pedido.
     */
    data: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
  }


  /**
   * Pedido createMany
   */
  export type PedidoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pedidos.
     */
    data: PedidoCreateManyInput | PedidoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pedido update
   */
  export type PedidoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pedido.
     */
    data: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
    /**
     * Choose, which Pedido to update.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido updateMany
   */
  export type PedidoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pedidos.
     */
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     */
    where?: PedidoWhereInput
  }


  /**
   * Pedido upsert
   */
  export type PedidoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pedido to update in case it exists.
     */
    where: PedidoWhereUniqueInput
    /**
     * In case the Pedido found by the `where` argument doesn't exist, create a new Pedido with this data.
     */
    create: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
    /**
     * In case the Pedido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
  }


  /**
   * Pedido delete
   */
  export type PedidoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    /**
     * Filter which Pedido to delete.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido deleteMany
   */
  export type PedidoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pedidos to delete
     */
    where?: PedidoWhereInput
  }


  /**
   * Pedido.ProdutosDoPedido
   */
  export type Pedido$ProdutosDoPedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    where?: ProdutosDoPedidoWhereInput
    orderBy?: ProdutosDoPedidoOrderByWithRelationInput | ProdutosDoPedidoOrderByWithRelationInput[]
    cursor?: ProdutosDoPedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutosDoPedidoScalarFieldEnum | ProdutosDoPedidoScalarFieldEnum[]
  }


  /**
   * Pedido without action
   */
  export type PedidoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
  }



  /**
   * Model StatusPedido
   */

  export type AggregateStatusPedido = {
    _count: StatusPedidoCountAggregateOutputType | null
    _avg: StatusPedidoAvgAggregateOutputType | null
    _sum: StatusPedidoSumAggregateOutputType | null
    _min: StatusPedidoMinAggregateOutputType | null
    _max: StatusPedidoMaxAggregateOutputType | null
  }

  export type StatusPedidoAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusPedidoSumAggregateOutputType = {
    id: number | null
  }

  export type StatusPedidoMinAggregateOutputType = {
    id: number | null
    enumerador: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StatusPedidoMaxAggregateOutputType = {
    id: number | null
    enumerador: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StatusPedidoCountAggregateOutputType = {
    id: number
    enumerador: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StatusPedidoAvgAggregateInputType = {
    id?: true
  }

  export type StatusPedidoSumAggregateInputType = {
    id?: true
  }

  export type StatusPedidoMinAggregateInputType = {
    id?: true
    enumerador?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StatusPedidoMaxAggregateInputType = {
    id?: true
    enumerador?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StatusPedidoCountAggregateInputType = {
    id?: true
    enumerador?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StatusPedidoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusPedido to aggregate.
     */
    where?: StatusPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusPedidos to fetch.
     */
    orderBy?: StatusPedidoOrderByWithRelationInput | StatusPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusPedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusPedidos
    **/
    _count?: true | StatusPedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusPedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusPedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusPedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusPedidoMaxAggregateInputType
  }

  export type GetStatusPedidoAggregateType<T extends StatusPedidoAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusPedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusPedido[P]>
      : GetScalarType<T[P], AggregateStatusPedido[P]>
  }




  export type StatusPedidoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusPedidoWhereInput
    orderBy?: StatusPedidoOrderByWithAggregationInput | StatusPedidoOrderByWithAggregationInput[]
    by: StatusPedidoScalarFieldEnum[] | StatusPedidoScalarFieldEnum
    having?: StatusPedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusPedidoCountAggregateInputType | true
    _avg?: StatusPedidoAvgAggregateInputType
    _sum?: StatusPedidoSumAggregateInputType
    _min?: StatusPedidoMinAggregateInputType
    _max?: StatusPedidoMaxAggregateInputType
  }

  export type StatusPedidoGroupByOutputType = {
    id: number
    enumerador: string
    createdAt: Date
    updatedAt: Date
    _count: StatusPedidoCountAggregateOutputType | null
    _avg: StatusPedidoAvgAggregateOutputType | null
    _sum: StatusPedidoSumAggregateOutputType | null
    _min: StatusPedidoMinAggregateOutputType | null
    _max: StatusPedidoMaxAggregateOutputType | null
  }

  type GetStatusPedidoGroupByPayload<T extends StatusPedidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusPedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusPedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusPedidoGroupByOutputType[P]>
            : GetScalarType<T[P], StatusPedidoGroupByOutputType[P]>
        }
      >
    >


  export type StatusPedidoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enumerador?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pedido?: boolean | StatusPedido$pedidoArgs<ExtArgs>
    _count?: boolean | StatusPedidoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusPedido"]>

  export type StatusPedidoSelectScalar = {
    id?: boolean
    enumerador?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StatusPedidoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pedido?: boolean | StatusPedido$pedidoArgs<ExtArgs>
    _count?: boolean | StatusPedidoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StatusPedidoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusPedido"
    objects: {
      pedido: Prisma.$PedidoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      enumerador: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["statusPedido"]>
    composites: {}
  }


  type StatusPedidoGetPayload<S extends boolean | null | undefined | StatusPedidoDefaultArgs> = $Result.GetResult<Prisma.$StatusPedidoPayload, S>

  type StatusPedidoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusPedidoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusPedidoCountAggregateInputType | true
    }

  export interface StatusPedidoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusPedido'], meta: { name: 'StatusPedido' } }
    /**
     * Find zero or one StatusPedido that matches the filter.
     * @param {StatusPedidoFindUniqueArgs} args - Arguments to find a StatusPedido
     * @example
     * // Get one StatusPedido
     * const statusPedido = await prisma.statusPedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusPedidoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusPedidoFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StatusPedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusPedidoFindUniqueOrThrowArgs} args - Arguments to find a StatusPedido
     * @example
     * // Get one StatusPedido
     * const statusPedido = await prisma.statusPedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusPedidoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusPedidoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StatusPedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoFindFirstArgs} args - Arguments to find a StatusPedido
     * @example
     * // Get one StatusPedido
     * const statusPedido = await prisma.statusPedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusPedidoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusPedidoFindFirstArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StatusPedido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoFindFirstOrThrowArgs} args - Arguments to find a StatusPedido
     * @example
     * // Get one StatusPedido
     * const statusPedido = await prisma.statusPedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusPedidoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusPedidoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StatusPedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusPedidos
     * const statusPedidos = await prisma.statusPedido.findMany()
     * 
     * // Get first 10 StatusPedidos
     * const statusPedidos = await prisma.statusPedido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusPedidoWithIdOnly = await prisma.statusPedido.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusPedidoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusPedidoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StatusPedido.
     * @param {StatusPedidoCreateArgs} args - Arguments to create a StatusPedido.
     * @example
     * // Create one StatusPedido
     * const StatusPedido = await prisma.statusPedido.create({
     *   data: {
     *     // ... data to create a StatusPedido
     *   }
     * })
     * 
    **/
    create<T extends StatusPedidoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusPedidoCreateArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StatusPedidos.
     *     @param {StatusPedidoCreateManyArgs} args - Arguments to create many StatusPedidos.
     *     @example
     *     // Create many StatusPedidos
     *     const statusPedido = await prisma.statusPedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusPedidoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusPedidoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StatusPedido.
     * @param {StatusPedidoDeleteArgs} args - Arguments to delete one StatusPedido.
     * @example
     * // Delete one StatusPedido
     * const StatusPedido = await prisma.statusPedido.delete({
     *   where: {
     *     // ... filter to delete one StatusPedido
     *   }
     * })
     * 
    **/
    delete<T extends StatusPedidoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusPedidoDeleteArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StatusPedido.
     * @param {StatusPedidoUpdateArgs} args - Arguments to update one StatusPedido.
     * @example
     * // Update one StatusPedido
     * const statusPedido = await prisma.statusPedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusPedidoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusPedidoUpdateArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StatusPedidos.
     * @param {StatusPedidoDeleteManyArgs} args - Arguments to filter StatusPedidos to delete.
     * @example
     * // Delete a few StatusPedidos
     * const { count } = await prisma.statusPedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusPedidoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusPedidoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusPedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusPedidos
     * const statusPedido = await prisma.statusPedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusPedidoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusPedidoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StatusPedido.
     * @param {StatusPedidoUpsertArgs} args - Arguments to update or create a StatusPedido.
     * @example
     * // Update or create a StatusPedido
     * const statusPedido = await prisma.statusPedido.upsert({
     *   create: {
     *     // ... data to create a StatusPedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusPedido we want to update
     *   }
     * })
    **/
    upsert<T extends StatusPedidoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusPedidoUpsertArgs<ExtArgs>>
    ): Prisma__StatusPedidoClient<$Result.GetResult<Prisma.$StatusPedidoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StatusPedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoCountArgs} args - Arguments to filter StatusPedidos to count.
     * @example
     * // Count the number of StatusPedidos
     * const count = await prisma.statusPedido.count({
     *   where: {
     *     // ... the filter for the StatusPedidos we want to count
     *   }
     * })
    **/
    count<T extends StatusPedidoCountArgs>(
      args?: Subset<T, StatusPedidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusPedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusPedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusPedidoAggregateArgs>(args: Subset<T, StatusPedidoAggregateArgs>): Prisma.PrismaPromise<GetStatusPedidoAggregateType<T>>

    /**
     * Group by StatusPedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusPedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusPedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusPedidoGroupByArgs['orderBy'] }
        : { orderBy?: StatusPedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusPedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusPedidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusPedido model
   */
  readonly fields: StatusPedidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusPedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusPedidoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pedido<T extends StatusPedido$pedidoArgs<ExtArgs> = {}>(args?: Subset<T, StatusPedido$pedidoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StatusPedido model
   */ 
  interface StatusPedidoFieldRefs {
    readonly id: FieldRef<"StatusPedido", 'Int'>
    readonly enumerador: FieldRef<"StatusPedido", 'String'>
    readonly createdAt: FieldRef<"StatusPedido", 'DateTime'>
    readonly updatedAt: FieldRef<"StatusPedido", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * StatusPedido findUnique
   */
  export type StatusPedidoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * Filter, which StatusPedido to fetch.
     */
    where: StatusPedidoWhereUniqueInput
  }


  /**
   * StatusPedido findUniqueOrThrow
   */
  export type StatusPedidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * Filter, which StatusPedido to fetch.
     */
    where: StatusPedidoWhereUniqueInput
  }


  /**
   * StatusPedido findFirst
   */
  export type StatusPedidoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * Filter, which StatusPedido to fetch.
     */
    where?: StatusPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusPedidos to fetch.
     */
    orderBy?: StatusPedidoOrderByWithRelationInput | StatusPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusPedidos.
     */
    cursor?: StatusPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusPedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusPedidos.
     */
    distinct?: StatusPedidoScalarFieldEnum | StatusPedidoScalarFieldEnum[]
  }


  /**
   * StatusPedido findFirstOrThrow
   */
  export type StatusPedidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * Filter, which StatusPedido to fetch.
     */
    where?: StatusPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusPedidos to fetch.
     */
    orderBy?: StatusPedidoOrderByWithRelationInput | StatusPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusPedidos.
     */
    cursor?: StatusPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusPedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusPedidos.
     */
    distinct?: StatusPedidoScalarFieldEnum | StatusPedidoScalarFieldEnum[]
  }


  /**
   * StatusPedido findMany
   */
  export type StatusPedidoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * Filter, which StatusPedidos to fetch.
     */
    where?: StatusPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusPedidos to fetch.
     */
    orderBy?: StatusPedidoOrderByWithRelationInput | StatusPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusPedidos.
     */
    cursor?: StatusPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusPedidos.
     */
    skip?: number
    distinct?: StatusPedidoScalarFieldEnum | StatusPedidoScalarFieldEnum[]
  }


  /**
   * StatusPedido create
   */
  export type StatusPedidoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusPedido.
     */
    data: XOR<StatusPedidoCreateInput, StatusPedidoUncheckedCreateInput>
  }


  /**
   * StatusPedido createMany
   */
  export type StatusPedidoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusPedidos.
     */
    data: StatusPedidoCreateManyInput | StatusPedidoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StatusPedido update
   */
  export type StatusPedidoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusPedido.
     */
    data: XOR<StatusPedidoUpdateInput, StatusPedidoUncheckedUpdateInput>
    /**
     * Choose, which StatusPedido to update.
     */
    where: StatusPedidoWhereUniqueInput
  }


  /**
   * StatusPedido updateMany
   */
  export type StatusPedidoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusPedidos.
     */
    data: XOR<StatusPedidoUpdateManyMutationInput, StatusPedidoUncheckedUpdateManyInput>
    /**
     * Filter which StatusPedidos to update
     */
    where?: StatusPedidoWhereInput
  }


  /**
   * StatusPedido upsert
   */
  export type StatusPedidoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusPedido to update in case it exists.
     */
    where: StatusPedidoWhereUniqueInput
    /**
     * In case the StatusPedido found by the `where` argument doesn't exist, create a new StatusPedido with this data.
     */
    create: XOR<StatusPedidoCreateInput, StatusPedidoUncheckedCreateInput>
    /**
     * In case the StatusPedido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusPedidoUpdateInput, StatusPedidoUncheckedUpdateInput>
  }


  /**
   * StatusPedido delete
   */
  export type StatusPedidoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
    /**
     * Filter which StatusPedido to delete.
     */
    where: StatusPedidoWhereUniqueInput
  }


  /**
   * StatusPedido deleteMany
   */
  export type StatusPedidoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusPedidos to delete
     */
    where?: StatusPedidoWhereInput
  }


  /**
   * StatusPedido.pedido
   */
  export type StatusPedido$pedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude<ExtArgs> | null
    where?: PedidoWhereInput
    orderBy?: PedidoOrderByWithRelationInput | PedidoOrderByWithRelationInput[]
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PedidoScalarFieldEnum | PedidoScalarFieldEnum[]
  }


  /**
   * StatusPedido without action
   */
  export type StatusPedidoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusPedido
     */
    select?: StatusPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusPedidoInclude<ExtArgs> | null
  }



  /**
   * Model ProdutosDoPedido
   */

  export type AggregateProdutosDoPedido = {
    _count: ProdutosDoPedidoCountAggregateOutputType | null
    _avg: ProdutosDoPedidoAvgAggregateOutputType | null
    _sum: ProdutosDoPedidoSumAggregateOutputType | null
    _min: ProdutosDoPedidoMinAggregateOutputType | null
    _max: ProdutosDoPedidoMaxAggregateOutputType | null
  }

  export type ProdutosDoPedidoAvgAggregateOutputType = {
    id: number | null
    produtoId: number | null
    pedidoId: number | null
    quantidade: number | null
    valor: Decimal | null
  }

  export type ProdutosDoPedidoSumAggregateOutputType = {
    id: number | null
    produtoId: number | null
    pedidoId: number | null
    quantidade: number | null
    valor: Decimal | null
  }

  export type ProdutosDoPedidoMinAggregateOutputType = {
    id: number | null
    produtoId: number | null
    pedidoId: number | null
    quantidade: number | null
    valor: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProdutosDoPedidoMaxAggregateOutputType = {
    id: number | null
    produtoId: number | null
    pedidoId: number | null
    quantidade: number | null
    valor: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProdutosDoPedidoCountAggregateOutputType = {
    id: number
    produtoId: number
    pedidoId: number
    quantidade: number
    valor: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProdutosDoPedidoAvgAggregateInputType = {
    id?: true
    produtoId?: true
    pedidoId?: true
    quantidade?: true
    valor?: true
  }

  export type ProdutosDoPedidoSumAggregateInputType = {
    id?: true
    produtoId?: true
    pedidoId?: true
    quantidade?: true
    valor?: true
  }

  export type ProdutosDoPedidoMinAggregateInputType = {
    id?: true
    produtoId?: true
    pedidoId?: true
    quantidade?: true
    valor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProdutosDoPedidoMaxAggregateInputType = {
    id?: true
    produtoId?: true
    pedidoId?: true
    quantidade?: true
    valor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProdutosDoPedidoCountAggregateInputType = {
    id?: true
    produtoId?: true
    pedidoId?: true
    quantidade?: true
    valor?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProdutosDoPedidoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutosDoPedido to aggregate.
     */
    where?: ProdutosDoPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosDoPedidos to fetch.
     */
    orderBy?: ProdutosDoPedidoOrderByWithRelationInput | ProdutosDoPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosDoPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosDoPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosDoPedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutosDoPedidos
    **/
    _count?: true | ProdutosDoPedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosDoPedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosDoPedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosDoPedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosDoPedidoMaxAggregateInputType
  }

  export type GetProdutosDoPedidoAggregateType<T extends ProdutosDoPedidoAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutosDoPedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutosDoPedido[P]>
      : GetScalarType<T[P], AggregateProdutosDoPedido[P]>
  }




  export type ProdutosDoPedidoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosDoPedidoWhereInput
    orderBy?: ProdutosDoPedidoOrderByWithAggregationInput | ProdutosDoPedidoOrderByWithAggregationInput[]
    by: ProdutosDoPedidoScalarFieldEnum[] | ProdutosDoPedidoScalarFieldEnum
    having?: ProdutosDoPedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosDoPedidoCountAggregateInputType | true
    _avg?: ProdutosDoPedidoAvgAggregateInputType
    _sum?: ProdutosDoPedidoSumAggregateInputType
    _min?: ProdutosDoPedidoMinAggregateInputType
    _max?: ProdutosDoPedidoMaxAggregateInputType
  }

  export type ProdutosDoPedidoGroupByOutputType = {
    id: number
    produtoId: number
    pedidoId: number
    quantidade: number
    valor: Decimal
    createdAt: Date
    updatedAt: Date
    _count: ProdutosDoPedidoCountAggregateOutputType | null
    _avg: ProdutosDoPedidoAvgAggregateOutputType | null
    _sum: ProdutosDoPedidoSumAggregateOutputType | null
    _min: ProdutosDoPedidoMinAggregateOutputType | null
    _max: ProdutosDoPedidoMaxAggregateOutputType | null
  }

  type GetProdutosDoPedidoGroupByPayload<T extends ProdutosDoPedidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutosDoPedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosDoPedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosDoPedidoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosDoPedidoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosDoPedidoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    produtoId?: boolean
    pedidoId?: boolean
    quantidade?: boolean
    valor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pedido?: boolean | PedidoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtosDoPedido"]>

  export type ProdutosDoPedidoSelectScalar = {
    id?: boolean
    produtoId?: boolean
    pedidoId?: boolean
    quantidade?: boolean
    valor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProdutosDoPedidoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pedido?: boolean | PedidoDefaultArgs<ExtArgs>
  }


  export type $ProdutosDoPedidoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutosDoPedido"
    objects: {
      pedido: Prisma.$PedidoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      produtoId: number
      pedidoId: number
      quantidade: number
      valor: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["produtosDoPedido"]>
    composites: {}
  }


  type ProdutosDoPedidoGetPayload<S extends boolean | null | undefined | ProdutosDoPedidoDefaultArgs> = $Result.GetResult<Prisma.$ProdutosDoPedidoPayload, S>

  type ProdutosDoPedidoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutosDoPedidoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutosDoPedidoCountAggregateInputType | true
    }

  export interface ProdutosDoPedidoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutosDoPedido'], meta: { name: 'ProdutosDoPedido' } }
    /**
     * Find zero or one ProdutosDoPedido that matches the filter.
     * @param {ProdutosDoPedidoFindUniqueArgs} args - Arguments to find a ProdutosDoPedido
     * @example
     * // Get one ProdutosDoPedido
     * const produtosDoPedido = await prisma.produtosDoPedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutosDoPedidoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDoPedidoFindUniqueArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProdutosDoPedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutosDoPedidoFindUniqueOrThrowArgs} args - Arguments to find a ProdutosDoPedido
     * @example
     * // Get one ProdutosDoPedido
     * const produtosDoPedido = await prisma.produtosDoPedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutosDoPedidoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDoPedidoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProdutosDoPedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoFindFirstArgs} args - Arguments to find a ProdutosDoPedido
     * @example
     * // Get one ProdutosDoPedido
     * const produtosDoPedido = await prisma.produtosDoPedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutosDoPedidoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDoPedidoFindFirstArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProdutosDoPedido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoFindFirstOrThrowArgs} args - Arguments to find a ProdutosDoPedido
     * @example
     * // Get one ProdutosDoPedido
     * const produtosDoPedido = await prisma.produtosDoPedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutosDoPedidoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDoPedidoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProdutosDoPedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutosDoPedidos
     * const produtosDoPedidos = await prisma.produtosDoPedido.findMany()
     * 
     * // Get first 10 ProdutosDoPedidos
     * const produtosDoPedidos = await prisma.produtosDoPedido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosDoPedidoWithIdOnly = await prisma.produtosDoPedido.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProdutosDoPedidoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDoPedidoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProdutosDoPedido.
     * @param {ProdutosDoPedidoCreateArgs} args - Arguments to create a ProdutosDoPedido.
     * @example
     * // Create one ProdutosDoPedido
     * const ProdutosDoPedido = await prisma.produtosDoPedido.create({
     *   data: {
     *     // ... data to create a ProdutosDoPedido
     *   }
     * })
     * 
    **/
    create<T extends ProdutosDoPedidoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDoPedidoCreateArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProdutosDoPedidos.
     *     @param {ProdutosDoPedidoCreateManyArgs} args - Arguments to create many ProdutosDoPedidos.
     *     @example
     *     // Create many ProdutosDoPedidos
     *     const produtosDoPedido = await prisma.produtosDoPedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutosDoPedidoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDoPedidoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdutosDoPedido.
     * @param {ProdutosDoPedidoDeleteArgs} args - Arguments to delete one ProdutosDoPedido.
     * @example
     * // Delete one ProdutosDoPedido
     * const ProdutosDoPedido = await prisma.produtosDoPedido.delete({
     *   where: {
     *     // ... filter to delete one ProdutosDoPedido
     *   }
     * })
     * 
    **/
    delete<T extends ProdutosDoPedidoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDoPedidoDeleteArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProdutosDoPedido.
     * @param {ProdutosDoPedidoUpdateArgs} args - Arguments to update one ProdutosDoPedido.
     * @example
     * // Update one ProdutosDoPedido
     * const produtosDoPedido = await prisma.produtosDoPedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutosDoPedidoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDoPedidoUpdateArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProdutosDoPedidos.
     * @param {ProdutosDoPedidoDeleteManyArgs} args - Arguments to filter ProdutosDoPedidos to delete.
     * @example
     * // Delete a few ProdutosDoPedidos
     * const { count } = await prisma.produtosDoPedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutosDoPedidoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDoPedidoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutosDoPedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutosDoPedidos
     * const produtosDoPedido = await prisma.produtosDoPedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutosDoPedidoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDoPedidoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutosDoPedido.
     * @param {ProdutosDoPedidoUpsertArgs} args - Arguments to update or create a ProdutosDoPedido.
     * @example
     * // Update or create a ProdutosDoPedido
     * const produtosDoPedido = await prisma.produtosDoPedido.upsert({
     *   create: {
     *     // ... data to create a ProdutosDoPedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutosDoPedido we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutosDoPedidoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDoPedidoUpsertArgs<ExtArgs>>
    ): Prisma__ProdutosDoPedidoClient<$Result.GetResult<Prisma.$ProdutosDoPedidoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProdutosDoPedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoCountArgs} args - Arguments to filter ProdutosDoPedidos to count.
     * @example
     * // Count the number of ProdutosDoPedidos
     * const count = await prisma.produtosDoPedido.count({
     *   where: {
     *     // ... the filter for the ProdutosDoPedidos we want to count
     *   }
     * })
    **/
    count<T extends ProdutosDoPedidoCountArgs>(
      args?: Subset<T, ProdutosDoPedidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosDoPedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutosDoPedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosDoPedidoAggregateArgs>(args: Subset<T, ProdutosDoPedidoAggregateArgs>): Prisma.PrismaPromise<GetProdutosDoPedidoAggregateType<T>>

    /**
     * Group by ProdutosDoPedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosDoPedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosDoPedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosDoPedidoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosDoPedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosDoPedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosDoPedidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutosDoPedido model
   */
  readonly fields: ProdutosDoPedidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutosDoPedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutosDoPedidoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pedido<T extends PedidoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PedidoDefaultArgs<ExtArgs>>): Prisma__PedidoClient<$Result.GetResult<Prisma.$PedidoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProdutosDoPedido model
   */ 
  interface ProdutosDoPedidoFieldRefs {
    readonly id: FieldRef<"ProdutosDoPedido", 'Int'>
    readonly produtoId: FieldRef<"ProdutosDoPedido", 'Int'>
    readonly pedidoId: FieldRef<"ProdutosDoPedido", 'Int'>
    readonly quantidade: FieldRef<"ProdutosDoPedido", 'Int'>
    readonly valor: FieldRef<"ProdutosDoPedido", 'Decimal'>
    readonly createdAt: FieldRef<"ProdutosDoPedido", 'DateTime'>
    readonly updatedAt: FieldRef<"ProdutosDoPedido", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ProdutosDoPedido findUnique
   */
  export type ProdutosDoPedidoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosDoPedido to fetch.
     */
    where: ProdutosDoPedidoWhereUniqueInput
  }


  /**
   * ProdutosDoPedido findUniqueOrThrow
   */
  export type ProdutosDoPedidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosDoPedido to fetch.
     */
    where: ProdutosDoPedidoWhereUniqueInput
  }


  /**
   * ProdutosDoPedido findFirst
   */
  export type ProdutosDoPedidoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosDoPedido to fetch.
     */
    where?: ProdutosDoPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosDoPedidos to fetch.
     */
    orderBy?: ProdutosDoPedidoOrderByWithRelationInput | ProdutosDoPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutosDoPedidos.
     */
    cursor?: ProdutosDoPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosDoPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosDoPedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutosDoPedidos.
     */
    distinct?: ProdutosDoPedidoScalarFieldEnum | ProdutosDoPedidoScalarFieldEnum[]
  }


  /**
   * ProdutosDoPedido findFirstOrThrow
   */
  export type ProdutosDoPedidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosDoPedido to fetch.
     */
    where?: ProdutosDoPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosDoPedidos to fetch.
     */
    orderBy?: ProdutosDoPedidoOrderByWithRelationInput | ProdutosDoPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutosDoPedidos.
     */
    cursor?: ProdutosDoPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosDoPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosDoPedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutosDoPedidos.
     */
    distinct?: ProdutosDoPedidoScalarFieldEnum | ProdutosDoPedidoScalarFieldEnum[]
  }


  /**
   * ProdutosDoPedido findMany
   */
  export type ProdutosDoPedidoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutosDoPedidos to fetch.
     */
    where?: ProdutosDoPedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutosDoPedidos to fetch.
     */
    orderBy?: ProdutosDoPedidoOrderByWithRelationInput | ProdutosDoPedidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutosDoPedidos.
     */
    cursor?: ProdutosDoPedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutosDoPedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutosDoPedidos.
     */
    skip?: number
    distinct?: ProdutosDoPedidoScalarFieldEnum | ProdutosDoPedidoScalarFieldEnum[]
  }


  /**
   * ProdutosDoPedido create
   */
  export type ProdutosDoPedidoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdutosDoPedido.
     */
    data: XOR<ProdutosDoPedidoCreateInput, ProdutosDoPedidoUncheckedCreateInput>
  }


  /**
   * ProdutosDoPedido createMany
   */
  export type ProdutosDoPedidoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutosDoPedidos.
     */
    data: ProdutosDoPedidoCreateManyInput | ProdutosDoPedidoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProdutosDoPedido update
   */
  export type ProdutosDoPedidoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdutosDoPedido.
     */
    data: XOR<ProdutosDoPedidoUpdateInput, ProdutosDoPedidoUncheckedUpdateInput>
    /**
     * Choose, which ProdutosDoPedido to update.
     */
    where: ProdutosDoPedidoWhereUniqueInput
  }


  /**
   * ProdutosDoPedido updateMany
   */
  export type ProdutosDoPedidoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutosDoPedidos.
     */
    data: XOR<ProdutosDoPedidoUpdateManyMutationInput, ProdutosDoPedidoUncheckedUpdateManyInput>
    /**
     * Filter which ProdutosDoPedidos to update
     */
    where?: ProdutosDoPedidoWhereInput
  }


  /**
   * ProdutosDoPedido upsert
   */
  export type ProdutosDoPedidoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdutosDoPedido to update in case it exists.
     */
    where: ProdutosDoPedidoWhereUniqueInput
    /**
     * In case the ProdutosDoPedido found by the `where` argument doesn't exist, create a new ProdutosDoPedido with this data.
     */
    create: XOR<ProdutosDoPedidoCreateInput, ProdutosDoPedidoUncheckedCreateInput>
    /**
     * In case the ProdutosDoPedido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosDoPedidoUpdateInput, ProdutosDoPedidoUncheckedUpdateInput>
  }


  /**
   * ProdutosDoPedido delete
   */
  export type ProdutosDoPedidoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
    /**
     * Filter which ProdutosDoPedido to delete.
     */
    where: ProdutosDoPedidoWhereUniqueInput
  }


  /**
   * ProdutosDoPedido deleteMany
   */
  export type ProdutosDoPedidoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutosDoPedidos to delete
     */
    where?: ProdutosDoPedidoWhereInput
  }


  /**
   * ProdutosDoPedido without action
   */
  export type ProdutosDoPedidoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutosDoPedido
     */
    select?: ProdutosDoPedidoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutosDoPedidoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PedidoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    pagamentoId: 'pagamentoId',
    statusPedidoId: 'statusPedidoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PedidoScalarFieldEnum = (typeof PedidoScalarFieldEnum)[keyof typeof PedidoScalarFieldEnum]


  export const StatusPedidoScalarFieldEnum: {
    id: 'id',
    enumerador: 'enumerador',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StatusPedidoScalarFieldEnum = (typeof StatusPedidoScalarFieldEnum)[keyof typeof StatusPedidoScalarFieldEnum]


  export const ProdutosDoPedidoScalarFieldEnum: {
    id: 'id',
    produtoId: 'produtoId',
    pedidoId: 'pedidoId',
    quantidade: 'quantidade',
    valor: 'valor',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProdutosDoPedidoScalarFieldEnum = (typeof ProdutosDoPedidoScalarFieldEnum)[keyof typeof ProdutosDoPedidoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PedidoWhereInput = {
    AND?: PedidoWhereInput | PedidoWhereInput[]
    OR?: PedidoWhereInput[]
    NOT?: PedidoWhereInput | PedidoWhereInput[]
    id?: IntFilter<"Pedido"> | number
    clienteId?: IntFilter<"Pedido"> | number
    pagamentoId?: StringNullableFilter<"Pedido"> | string | null
    statusPedidoId?: IntFilter<"Pedido"> | number
    createdAt?: DateTimeFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeFilter<"Pedido"> | Date | string
    statusPedido?: XOR<StatusPedidoRelationFilter, StatusPedidoWhereInput>
    ProdutosDoPedido?: ProdutosDoPedidoListRelationFilter
  }

  export type PedidoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    pagamentoId?: SortOrderInput | SortOrder
    statusPedidoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    statusPedido?: StatusPedidoOrderByWithRelationInput
    ProdutosDoPedido?: ProdutosDoPedidoOrderByRelationAggregateInput
  }

  export type PedidoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PedidoWhereInput | PedidoWhereInput[]
    OR?: PedidoWhereInput[]
    NOT?: PedidoWhereInput | PedidoWhereInput[]
    clienteId?: IntFilter<"Pedido"> | number
    pagamentoId?: StringNullableFilter<"Pedido"> | string | null
    statusPedidoId?: IntFilter<"Pedido"> | number
    createdAt?: DateTimeFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeFilter<"Pedido"> | Date | string
    statusPedido?: XOR<StatusPedidoRelationFilter, StatusPedidoWhereInput>
    ProdutosDoPedido?: ProdutosDoPedidoListRelationFilter
  }, "id">

  export type PedidoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    pagamentoId?: SortOrderInput | SortOrder
    statusPedidoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PedidoCountOrderByAggregateInput
    _avg?: PedidoAvgOrderByAggregateInput
    _max?: PedidoMaxOrderByAggregateInput
    _min?: PedidoMinOrderByAggregateInput
    _sum?: PedidoSumOrderByAggregateInput
  }

  export type PedidoScalarWhereWithAggregatesInput = {
    AND?: PedidoScalarWhereWithAggregatesInput | PedidoScalarWhereWithAggregatesInput[]
    OR?: PedidoScalarWhereWithAggregatesInput[]
    NOT?: PedidoScalarWhereWithAggregatesInput | PedidoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pedido"> | number
    clienteId?: IntWithAggregatesFilter<"Pedido"> | number
    pagamentoId?: StringNullableWithAggregatesFilter<"Pedido"> | string | null
    statusPedidoId?: IntWithAggregatesFilter<"Pedido"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pedido"> | Date | string
  }

  export type StatusPedidoWhereInput = {
    AND?: StatusPedidoWhereInput | StatusPedidoWhereInput[]
    OR?: StatusPedidoWhereInput[]
    NOT?: StatusPedidoWhereInput | StatusPedidoWhereInput[]
    id?: IntFilter<"StatusPedido"> | number
    enumerador?: StringFilter<"StatusPedido"> | string
    createdAt?: DateTimeFilter<"StatusPedido"> | Date | string
    updatedAt?: DateTimeFilter<"StatusPedido"> | Date | string
    pedido?: PedidoListRelationFilter
  }

  export type StatusPedidoOrderByWithRelationInput = {
    id?: SortOrder
    enumerador?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pedido?: PedidoOrderByRelationAggregateInput
  }

  export type StatusPedidoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    enumerador?: string
    AND?: StatusPedidoWhereInput | StatusPedidoWhereInput[]
    OR?: StatusPedidoWhereInput[]
    NOT?: StatusPedidoWhereInput | StatusPedidoWhereInput[]
    createdAt?: DateTimeFilter<"StatusPedido"> | Date | string
    updatedAt?: DateTimeFilter<"StatusPedido"> | Date | string
    pedido?: PedidoListRelationFilter
  }, "id" | "enumerador">

  export type StatusPedidoOrderByWithAggregationInput = {
    id?: SortOrder
    enumerador?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StatusPedidoCountOrderByAggregateInput
    _avg?: StatusPedidoAvgOrderByAggregateInput
    _max?: StatusPedidoMaxOrderByAggregateInput
    _min?: StatusPedidoMinOrderByAggregateInput
    _sum?: StatusPedidoSumOrderByAggregateInput
  }

  export type StatusPedidoScalarWhereWithAggregatesInput = {
    AND?: StatusPedidoScalarWhereWithAggregatesInput | StatusPedidoScalarWhereWithAggregatesInput[]
    OR?: StatusPedidoScalarWhereWithAggregatesInput[]
    NOT?: StatusPedidoScalarWhereWithAggregatesInput | StatusPedidoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StatusPedido"> | number
    enumerador?: StringWithAggregatesFilter<"StatusPedido"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StatusPedido"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StatusPedido"> | Date | string
  }

  export type ProdutosDoPedidoWhereInput = {
    AND?: ProdutosDoPedidoWhereInput | ProdutosDoPedidoWhereInput[]
    OR?: ProdutosDoPedidoWhereInput[]
    NOT?: ProdutosDoPedidoWhereInput | ProdutosDoPedidoWhereInput[]
    id?: IntFilter<"ProdutosDoPedido"> | number
    produtoId?: IntFilter<"ProdutosDoPedido"> | number
    pedidoId?: IntFilter<"ProdutosDoPedido"> | number
    quantidade?: IntFilter<"ProdutosDoPedido"> | number
    valor?: DecimalFilter<"ProdutosDoPedido"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ProdutosDoPedido"> | Date | string
    updatedAt?: DateTimeFilter<"ProdutosDoPedido"> | Date | string
    pedido?: XOR<PedidoRelationFilter, PedidoWhereInput>
  }

  export type ProdutosDoPedidoOrderByWithRelationInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pedido?: PedidoOrderByWithRelationInput
  }

  export type ProdutosDoPedidoWhereUniqueInput = Prisma.AtLeast<{
    produtoId_pedidoId_id?: ProdutosDoPedidoProdutoIdPedidoIdIdCompoundUniqueInput
    AND?: ProdutosDoPedidoWhereInput | ProdutosDoPedidoWhereInput[]
    OR?: ProdutosDoPedidoWhereInput[]
    NOT?: ProdutosDoPedidoWhereInput | ProdutosDoPedidoWhereInput[]
    id?: IntFilter<"ProdutosDoPedido"> | number
    produtoId?: IntFilter<"ProdutosDoPedido"> | number
    pedidoId?: IntFilter<"ProdutosDoPedido"> | number
    quantidade?: IntFilter<"ProdutosDoPedido"> | number
    valor?: DecimalFilter<"ProdutosDoPedido"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ProdutosDoPedido"> | Date | string
    updatedAt?: DateTimeFilter<"ProdutosDoPedido"> | Date | string
    pedido?: XOR<PedidoRelationFilter, PedidoWhereInput>
  }, "produtoId_pedidoId_id">

  export type ProdutosDoPedidoOrderByWithAggregationInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProdutosDoPedidoCountOrderByAggregateInput
    _avg?: ProdutosDoPedidoAvgOrderByAggregateInput
    _max?: ProdutosDoPedidoMaxOrderByAggregateInput
    _min?: ProdutosDoPedidoMinOrderByAggregateInput
    _sum?: ProdutosDoPedidoSumOrderByAggregateInput
  }

  export type ProdutosDoPedidoScalarWhereWithAggregatesInput = {
    AND?: ProdutosDoPedidoScalarWhereWithAggregatesInput | ProdutosDoPedidoScalarWhereWithAggregatesInput[]
    OR?: ProdutosDoPedidoScalarWhereWithAggregatesInput[]
    NOT?: ProdutosDoPedidoScalarWhereWithAggregatesInput | ProdutosDoPedidoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdutosDoPedido"> | number
    produtoId?: IntWithAggregatesFilter<"ProdutosDoPedido"> | number
    pedidoId?: IntWithAggregatesFilter<"ProdutosDoPedido"> | number
    quantidade?: IntWithAggregatesFilter<"ProdutosDoPedido"> | number
    valor?: DecimalWithAggregatesFilter<"ProdutosDoPedido"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"ProdutosDoPedido"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProdutosDoPedido"> | Date | string
  }

  export type PedidoCreateInput = {
    clienteId: number
    pagamentoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    statusPedido: StatusPedidoCreateNestedOneWithoutPedidoInput
    ProdutosDoPedido?: ProdutosDoPedidoCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateInput = {
    id?: number
    clienteId: number
    pagamentoId?: string | null
    statusPedidoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ProdutosDoPedido?: ProdutosDoPedidoUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUpdateInput = {
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statusPedido?: StatusPedidoUpdateOneRequiredWithoutPedidoNestedInput
    ProdutosDoPedido?: ProdutosDoPedidoUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    statusPedidoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProdutosDoPedido?: ProdutosDoPedidoUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoCreateManyInput = {
    id?: number
    clienteId: number
    pagamentoId?: string | null
    statusPedidoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoUpdateManyMutationInput = {
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    statusPedidoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusPedidoCreateInput = {
    enumerador: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pedido?: PedidoCreateNestedManyWithoutStatusPedidoInput
  }

  export type StatusPedidoUncheckedCreateInput = {
    id?: number
    enumerador: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pedido?: PedidoUncheckedCreateNestedManyWithoutStatusPedidoInput
  }

  export type StatusPedidoUpdateInput = {
    enumerador?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pedido?: PedidoUpdateManyWithoutStatusPedidoNestedInput
  }

  export type StatusPedidoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    enumerador?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pedido?: PedidoUncheckedUpdateManyWithoutStatusPedidoNestedInput
  }

  export type StatusPedidoCreateManyInput = {
    id?: number
    enumerador: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatusPedidoUpdateManyMutationInput = {
    enumerador?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusPedidoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    enumerador?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoCreateInput = {
    id?: number
    produtoId: number
    quantidade: number
    valor: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    pedido: PedidoCreateNestedOneWithoutProdutosDoPedidoInput
  }

  export type ProdutosDoPedidoUncheckedCreateInput = {
    id?: number
    produtoId: number
    pedidoId: number
    quantidade: number
    valor: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProdutosDoPedidoUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pedido?: PedidoUpdateOneRequiredWithoutProdutosDoPedidoNestedInput
  }

  export type ProdutosDoPedidoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    pedidoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoCreateManyInput = {
    id?: number
    produtoId: number
    pedidoId: number
    quantidade: number
    valor: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProdutosDoPedidoUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    pedidoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StatusPedidoRelationFilter = {
    is?: StatusPedidoWhereInput
    isNot?: StatusPedidoWhereInput
  }

  export type ProdutosDoPedidoListRelationFilter = {
    every?: ProdutosDoPedidoWhereInput
    some?: ProdutosDoPedidoWhereInput
    none?: ProdutosDoPedidoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProdutosDoPedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PedidoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    pagamentoId?: SortOrder
    statusPedidoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PedidoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    statusPedidoId?: SortOrder
  }

  export type PedidoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    pagamentoId?: SortOrder
    statusPedidoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PedidoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    pagamentoId?: SortOrder
    statusPedidoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PedidoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    statusPedidoId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PedidoListRelationFilter = {
    every?: PedidoWhereInput
    some?: PedidoWhereInput
    none?: PedidoWhereInput
  }

  export type PedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusPedidoCountOrderByAggregateInput = {
    id?: SortOrder
    enumerador?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatusPedidoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusPedidoMaxOrderByAggregateInput = {
    id?: SortOrder
    enumerador?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatusPedidoMinOrderByAggregateInput = {
    id?: SortOrder
    enumerador?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatusPedidoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type PedidoRelationFilter = {
    is?: PedidoWhereInput
    isNot?: PedidoWhereInput
  }

  export type ProdutosDoPedidoProdutoIdPedidoIdIdCompoundUniqueInput = {
    produtoId: number
    pedidoId: number
    id: number
  }

  export type ProdutosDoPedidoCountOrderByAggregateInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProdutosDoPedidoAvgOrderByAggregateInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
  }

  export type ProdutosDoPedidoMaxOrderByAggregateInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProdutosDoPedidoMinOrderByAggregateInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProdutosDoPedidoSumOrderByAggregateInput = {
    id?: SortOrder
    produtoId?: SortOrder
    pedidoId?: SortOrder
    quantidade?: SortOrder
    valor?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type StatusPedidoCreateNestedOneWithoutPedidoInput = {
    create?: XOR<StatusPedidoCreateWithoutPedidoInput, StatusPedidoUncheckedCreateWithoutPedidoInput>
    connectOrCreate?: StatusPedidoCreateOrConnectWithoutPedidoInput
    connect?: StatusPedidoWhereUniqueInput
  }

  export type ProdutosDoPedidoCreateNestedManyWithoutPedidoInput = {
    create?: XOR<ProdutosDoPedidoCreateWithoutPedidoInput, ProdutosDoPedidoUncheckedCreateWithoutPedidoInput> | ProdutosDoPedidoCreateWithoutPedidoInput[] | ProdutosDoPedidoUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: ProdutosDoPedidoCreateOrConnectWithoutPedidoInput | ProdutosDoPedidoCreateOrConnectWithoutPedidoInput[]
    createMany?: ProdutosDoPedidoCreateManyPedidoInputEnvelope
    connect?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
  }

  export type ProdutosDoPedidoUncheckedCreateNestedManyWithoutPedidoInput = {
    create?: XOR<ProdutosDoPedidoCreateWithoutPedidoInput, ProdutosDoPedidoUncheckedCreateWithoutPedidoInput> | ProdutosDoPedidoCreateWithoutPedidoInput[] | ProdutosDoPedidoUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: ProdutosDoPedidoCreateOrConnectWithoutPedidoInput | ProdutosDoPedidoCreateOrConnectWithoutPedidoInput[]
    createMany?: ProdutosDoPedidoCreateManyPedidoInputEnvelope
    connect?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StatusPedidoUpdateOneRequiredWithoutPedidoNestedInput = {
    create?: XOR<StatusPedidoCreateWithoutPedidoInput, StatusPedidoUncheckedCreateWithoutPedidoInput>
    connectOrCreate?: StatusPedidoCreateOrConnectWithoutPedidoInput
    upsert?: StatusPedidoUpsertWithoutPedidoInput
    connect?: StatusPedidoWhereUniqueInput
    update?: XOR<XOR<StatusPedidoUpdateToOneWithWhereWithoutPedidoInput, StatusPedidoUpdateWithoutPedidoInput>, StatusPedidoUncheckedUpdateWithoutPedidoInput>
  }

  export type ProdutosDoPedidoUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<ProdutosDoPedidoCreateWithoutPedidoInput, ProdutosDoPedidoUncheckedCreateWithoutPedidoInput> | ProdutosDoPedidoCreateWithoutPedidoInput[] | ProdutosDoPedidoUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: ProdutosDoPedidoCreateOrConnectWithoutPedidoInput | ProdutosDoPedidoCreateOrConnectWithoutPedidoInput[]
    upsert?: ProdutosDoPedidoUpsertWithWhereUniqueWithoutPedidoInput | ProdutosDoPedidoUpsertWithWhereUniqueWithoutPedidoInput[]
    createMany?: ProdutosDoPedidoCreateManyPedidoInputEnvelope
    set?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    disconnect?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    delete?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    connect?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    update?: ProdutosDoPedidoUpdateWithWhereUniqueWithoutPedidoInput | ProdutosDoPedidoUpdateWithWhereUniqueWithoutPedidoInput[]
    updateMany?: ProdutosDoPedidoUpdateManyWithWhereWithoutPedidoInput | ProdutosDoPedidoUpdateManyWithWhereWithoutPedidoInput[]
    deleteMany?: ProdutosDoPedidoScalarWhereInput | ProdutosDoPedidoScalarWhereInput[]
  }

  export type ProdutosDoPedidoUncheckedUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<ProdutosDoPedidoCreateWithoutPedidoInput, ProdutosDoPedidoUncheckedCreateWithoutPedidoInput> | ProdutosDoPedidoCreateWithoutPedidoInput[] | ProdutosDoPedidoUncheckedCreateWithoutPedidoInput[]
    connectOrCreate?: ProdutosDoPedidoCreateOrConnectWithoutPedidoInput | ProdutosDoPedidoCreateOrConnectWithoutPedidoInput[]
    upsert?: ProdutosDoPedidoUpsertWithWhereUniqueWithoutPedidoInput | ProdutosDoPedidoUpsertWithWhereUniqueWithoutPedidoInput[]
    createMany?: ProdutosDoPedidoCreateManyPedidoInputEnvelope
    set?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    disconnect?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    delete?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    connect?: ProdutosDoPedidoWhereUniqueInput | ProdutosDoPedidoWhereUniqueInput[]
    update?: ProdutosDoPedidoUpdateWithWhereUniqueWithoutPedidoInput | ProdutosDoPedidoUpdateWithWhereUniqueWithoutPedidoInput[]
    updateMany?: ProdutosDoPedidoUpdateManyWithWhereWithoutPedidoInput | ProdutosDoPedidoUpdateManyWithWhereWithoutPedidoInput[]
    deleteMany?: ProdutosDoPedidoScalarWhereInput | ProdutosDoPedidoScalarWhereInput[]
  }

  export type PedidoCreateNestedManyWithoutStatusPedidoInput = {
    create?: XOR<PedidoCreateWithoutStatusPedidoInput, PedidoUncheckedCreateWithoutStatusPedidoInput> | PedidoCreateWithoutStatusPedidoInput[] | PedidoUncheckedCreateWithoutStatusPedidoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutStatusPedidoInput | PedidoCreateOrConnectWithoutStatusPedidoInput[]
    createMany?: PedidoCreateManyStatusPedidoInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type PedidoUncheckedCreateNestedManyWithoutStatusPedidoInput = {
    create?: XOR<PedidoCreateWithoutStatusPedidoInput, PedidoUncheckedCreateWithoutStatusPedidoInput> | PedidoCreateWithoutStatusPedidoInput[] | PedidoUncheckedCreateWithoutStatusPedidoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutStatusPedidoInput | PedidoCreateOrConnectWithoutStatusPedidoInput[]
    createMany?: PedidoCreateManyStatusPedidoInputEnvelope
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PedidoUpdateManyWithoutStatusPedidoNestedInput = {
    create?: XOR<PedidoCreateWithoutStatusPedidoInput, PedidoUncheckedCreateWithoutStatusPedidoInput> | PedidoCreateWithoutStatusPedidoInput[] | PedidoUncheckedCreateWithoutStatusPedidoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutStatusPedidoInput | PedidoCreateOrConnectWithoutStatusPedidoInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutStatusPedidoInput | PedidoUpsertWithWhereUniqueWithoutStatusPedidoInput[]
    createMany?: PedidoCreateManyStatusPedidoInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutStatusPedidoInput | PedidoUpdateWithWhereUniqueWithoutStatusPedidoInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutStatusPedidoInput | PedidoUpdateManyWithWhereWithoutStatusPedidoInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type PedidoUncheckedUpdateManyWithoutStatusPedidoNestedInput = {
    create?: XOR<PedidoCreateWithoutStatusPedidoInput, PedidoUncheckedCreateWithoutStatusPedidoInput> | PedidoCreateWithoutStatusPedidoInput[] | PedidoUncheckedCreateWithoutStatusPedidoInput[]
    connectOrCreate?: PedidoCreateOrConnectWithoutStatusPedidoInput | PedidoCreateOrConnectWithoutStatusPedidoInput[]
    upsert?: PedidoUpsertWithWhereUniqueWithoutStatusPedidoInput | PedidoUpsertWithWhereUniqueWithoutStatusPedidoInput[]
    createMany?: PedidoCreateManyStatusPedidoInputEnvelope
    set?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    disconnect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    delete?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    connect?: PedidoWhereUniqueInput | PedidoWhereUniqueInput[]
    update?: PedidoUpdateWithWhereUniqueWithoutStatusPedidoInput | PedidoUpdateWithWhereUniqueWithoutStatusPedidoInput[]
    updateMany?: PedidoUpdateManyWithWhereWithoutStatusPedidoInput | PedidoUpdateManyWithWhereWithoutStatusPedidoInput[]
    deleteMany?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
  }

  export type PedidoCreateNestedOneWithoutProdutosDoPedidoInput = {
    create?: XOR<PedidoCreateWithoutProdutosDoPedidoInput, PedidoUncheckedCreateWithoutProdutosDoPedidoInput>
    connectOrCreate?: PedidoCreateOrConnectWithoutProdutosDoPedidoInput
    connect?: PedidoWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PedidoUpdateOneRequiredWithoutProdutosDoPedidoNestedInput = {
    create?: XOR<PedidoCreateWithoutProdutosDoPedidoInput, PedidoUncheckedCreateWithoutProdutosDoPedidoInput>
    connectOrCreate?: PedidoCreateOrConnectWithoutProdutosDoPedidoInput
    upsert?: PedidoUpsertWithoutProdutosDoPedidoInput
    connect?: PedidoWhereUniqueInput
    update?: XOR<XOR<PedidoUpdateToOneWithWhereWithoutProdutosDoPedidoInput, PedidoUpdateWithoutProdutosDoPedidoInput>, PedidoUncheckedUpdateWithoutProdutosDoPedidoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type StatusPedidoCreateWithoutPedidoInput = {
    enumerador: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatusPedidoUncheckedCreateWithoutPedidoInput = {
    id?: number
    enumerador: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatusPedidoCreateOrConnectWithoutPedidoInput = {
    where: StatusPedidoWhereUniqueInput
    create: XOR<StatusPedidoCreateWithoutPedidoInput, StatusPedidoUncheckedCreateWithoutPedidoInput>
  }

  export type ProdutosDoPedidoCreateWithoutPedidoInput = {
    id?: number
    produtoId: number
    quantidade: number
    valor: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProdutosDoPedidoUncheckedCreateWithoutPedidoInput = {
    id?: number
    produtoId: number
    quantidade: number
    valor: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProdutosDoPedidoCreateOrConnectWithoutPedidoInput = {
    where: ProdutosDoPedidoWhereUniqueInput
    create: XOR<ProdutosDoPedidoCreateWithoutPedidoInput, ProdutosDoPedidoUncheckedCreateWithoutPedidoInput>
  }

  export type ProdutosDoPedidoCreateManyPedidoInputEnvelope = {
    data: ProdutosDoPedidoCreateManyPedidoInput | ProdutosDoPedidoCreateManyPedidoInput[]
    skipDuplicates?: boolean
  }

  export type StatusPedidoUpsertWithoutPedidoInput = {
    update: XOR<StatusPedidoUpdateWithoutPedidoInput, StatusPedidoUncheckedUpdateWithoutPedidoInput>
    create: XOR<StatusPedidoCreateWithoutPedidoInput, StatusPedidoUncheckedCreateWithoutPedidoInput>
    where?: StatusPedidoWhereInput
  }

  export type StatusPedidoUpdateToOneWithWhereWithoutPedidoInput = {
    where?: StatusPedidoWhereInput
    data: XOR<StatusPedidoUpdateWithoutPedidoInput, StatusPedidoUncheckedUpdateWithoutPedidoInput>
  }

  export type StatusPedidoUpdateWithoutPedidoInput = {
    enumerador?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusPedidoUncheckedUpdateWithoutPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    enumerador?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoUpsertWithWhereUniqueWithoutPedidoInput = {
    where: ProdutosDoPedidoWhereUniqueInput
    update: XOR<ProdutosDoPedidoUpdateWithoutPedidoInput, ProdutosDoPedidoUncheckedUpdateWithoutPedidoInput>
    create: XOR<ProdutosDoPedidoCreateWithoutPedidoInput, ProdutosDoPedidoUncheckedCreateWithoutPedidoInput>
  }

  export type ProdutosDoPedidoUpdateWithWhereUniqueWithoutPedidoInput = {
    where: ProdutosDoPedidoWhereUniqueInput
    data: XOR<ProdutosDoPedidoUpdateWithoutPedidoInput, ProdutosDoPedidoUncheckedUpdateWithoutPedidoInput>
  }

  export type ProdutosDoPedidoUpdateManyWithWhereWithoutPedidoInput = {
    where: ProdutosDoPedidoScalarWhereInput
    data: XOR<ProdutosDoPedidoUpdateManyMutationInput, ProdutosDoPedidoUncheckedUpdateManyWithoutPedidoInput>
  }

  export type ProdutosDoPedidoScalarWhereInput = {
    AND?: ProdutosDoPedidoScalarWhereInput | ProdutosDoPedidoScalarWhereInput[]
    OR?: ProdutosDoPedidoScalarWhereInput[]
    NOT?: ProdutosDoPedidoScalarWhereInput | ProdutosDoPedidoScalarWhereInput[]
    id?: IntFilter<"ProdutosDoPedido"> | number
    produtoId?: IntFilter<"ProdutosDoPedido"> | number
    pedidoId?: IntFilter<"ProdutosDoPedido"> | number
    quantidade?: IntFilter<"ProdutosDoPedido"> | number
    valor?: DecimalFilter<"ProdutosDoPedido"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"ProdutosDoPedido"> | Date | string
    updatedAt?: DateTimeFilter<"ProdutosDoPedido"> | Date | string
  }

  export type PedidoCreateWithoutStatusPedidoInput = {
    clienteId: number
    pagamentoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProdutosDoPedido?: ProdutosDoPedidoCreateNestedManyWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutStatusPedidoInput = {
    id?: number
    clienteId: number
    pagamentoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ProdutosDoPedido?: ProdutosDoPedidoUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type PedidoCreateOrConnectWithoutStatusPedidoInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutStatusPedidoInput, PedidoUncheckedCreateWithoutStatusPedidoInput>
  }

  export type PedidoCreateManyStatusPedidoInputEnvelope = {
    data: PedidoCreateManyStatusPedidoInput | PedidoCreateManyStatusPedidoInput[]
    skipDuplicates?: boolean
  }

  export type PedidoUpsertWithWhereUniqueWithoutStatusPedidoInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutStatusPedidoInput, PedidoUncheckedUpdateWithoutStatusPedidoInput>
    create: XOR<PedidoCreateWithoutStatusPedidoInput, PedidoUncheckedCreateWithoutStatusPedidoInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutStatusPedidoInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutStatusPedidoInput, PedidoUncheckedUpdateWithoutStatusPedidoInput>
  }

  export type PedidoUpdateManyWithWhereWithoutStatusPedidoInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutStatusPedidoInput>
  }

  export type PedidoScalarWhereInput = {
    AND?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
    OR?: PedidoScalarWhereInput[]
    NOT?: PedidoScalarWhereInput | PedidoScalarWhereInput[]
    id?: IntFilter<"Pedido"> | number
    clienteId?: IntFilter<"Pedido"> | number
    pagamentoId?: StringNullableFilter<"Pedido"> | string | null
    statusPedidoId?: IntFilter<"Pedido"> | number
    createdAt?: DateTimeFilter<"Pedido"> | Date | string
    updatedAt?: DateTimeFilter<"Pedido"> | Date | string
  }

  export type PedidoCreateWithoutProdutosDoPedidoInput = {
    clienteId: number
    pagamentoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    statusPedido: StatusPedidoCreateNestedOneWithoutPedidoInput
  }

  export type PedidoUncheckedCreateWithoutProdutosDoPedidoInput = {
    id?: number
    clienteId: number
    pagamentoId?: string | null
    statusPedidoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoCreateOrConnectWithoutProdutosDoPedidoInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutProdutosDoPedidoInput, PedidoUncheckedCreateWithoutProdutosDoPedidoInput>
  }

  export type PedidoUpsertWithoutProdutosDoPedidoInput = {
    update: XOR<PedidoUpdateWithoutProdutosDoPedidoInput, PedidoUncheckedUpdateWithoutProdutosDoPedidoInput>
    create: XOR<PedidoCreateWithoutProdutosDoPedidoInput, PedidoUncheckedCreateWithoutProdutosDoPedidoInput>
    where?: PedidoWhereInput
  }

  export type PedidoUpdateToOneWithWhereWithoutProdutosDoPedidoInput = {
    where?: PedidoWhereInput
    data: XOR<PedidoUpdateWithoutProdutosDoPedidoInput, PedidoUncheckedUpdateWithoutProdutosDoPedidoInput>
  }

  export type PedidoUpdateWithoutProdutosDoPedidoInput = {
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statusPedido?: StatusPedidoUpdateOneRequiredWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutProdutosDoPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    statusPedidoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoCreateManyPedidoInput = {
    id?: number
    produtoId: number
    quantidade: number
    valor: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProdutosDoPedidoUpdateWithoutPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoUncheckedUpdateWithoutPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutosDoPedidoUncheckedUpdateManyWithoutPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PedidoCreateManyStatusPedidoInput = {
    id?: number
    clienteId: number
    pagamentoId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PedidoUpdateWithoutStatusPedidoInput = {
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProdutosDoPedido?: ProdutosDoPedidoUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateWithoutStatusPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ProdutosDoPedido?: ProdutosDoPedidoUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type PedidoUncheckedUpdateManyWithoutStatusPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    pagamentoId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PedidoCountOutputTypeDefaultArgs instead
     */
    export type PedidoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PedidoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusPedidoCountOutputTypeDefaultArgs instead
     */
    export type StatusPedidoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusPedidoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PedidoDefaultArgs instead
     */
    export type PedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PedidoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusPedidoDefaultArgs instead
     */
    export type StatusPedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusPedidoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutosDoPedidoDefaultArgs instead
     */
    export type ProdutosDoPedidoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutosDoPedidoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}